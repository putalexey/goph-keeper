// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: services.proto

package gproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GKServerClient is the client API for GKServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GKServerClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*AuthorizeResponse, error)
	CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*CreateRecordResponse, error)
	UpdateRecordField(ctx context.Context, in *UpdateRecordFieldsRequest, opts ...grpc.CallOption) (*UpdateRecordFieldsResponse, error)
	DeleteRecord(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*Empty, error)
	GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordResponse, error)
	GetRecords(ctx context.Context, in *GetRecordsRequest, opts ...grpc.CallOption) (*GetRecordsResponse, error)
	//  rpc GetUpdates(models.GetUpdatesRequest) returns (models.GetUpdatesResponse);
	Ping(ctx context.Context, in *PingPong, opts ...grpc.CallOption) (*PingPong, error)
}

type gKServerClient struct {
	cc grpc.ClientConnInterface
}

func NewGKServerClient(cc grpc.ClientConnInterface) GKServerClient {
	return &gKServerClient{cc}
}

func (c *gKServerClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/gkeeper.services.GKServer/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gKServerClient) Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*AuthorizeResponse, error) {
	out := new(AuthorizeResponse)
	err := c.cc.Invoke(ctx, "/gkeeper.services.GKServer/Authorize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gKServerClient) CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*CreateRecordResponse, error) {
	out := new(CreateRecordResponse)
	err := c.cc.Invoke(ctx, "/gkeeper.services.GKServer/CreateRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gKServerClient) UpdateRecordField(ctx context.Context, in *UpdateRecordFieldsRequest, opts ...grpc.CallOption) (*UpdateRecordFieldsResponse, error) {
	out := new(UpdateRecordFieldsResponse)
	err := c.cc.Invoke(ctx, "/gkeeper.services.GKServer/UpdateRecordField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gKServerClient) DeleteRecord(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/gkeeper.services.GKServer/DeleteRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gKServerClient) GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordResponse, error) {
	out := new(GetRecordResponse)
	err := c.cc.Invoke(ctx, "/gkeeper.services.GKServer/GetRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gKServerClient) GetRecords(ctx context.Context, in *GetRecordsRequest, opts ...grpc.CallOption) (*GetRecordsResponse, error) {
	out := new(GetRecordsResponse)
	err := c.cc.Invoke(ctx, "/gkeeper.services.GKServer/GetRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gKServerClient) Ping(ctx context.Context, in *PingPong, opts ...grpc.CallOption) (*PingPong, error) {
	out := new(PingPong)
	err := c.cc.Invoke(ctx, "/gkeeper.services.GKServer/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GKServerServer is the server API for GKServer service.
// All implementations must embed UnimplementedGKServerServer
// for forward compatibility
type GKServerServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Authorize(context.Context, *AuthorizeRequest) (*AuthorizeResponse, error)
	CreateRecord(context.Context, *CreateRecordRequest) (*CreateRecordResponse, error)
	UpdateRecordField(context.Context, *UpdateRecordFieldsRequest) (*UpdateRecordFieldsResponse, error)
	DeleteRecord(context.Context, *DeleteRecordRequest) (*Empty, error)
	GetRecord(context.Context, *GetRecordRequest) (*GetRecordResponse, error)
	GetRecords(context.Context, *GetRecordsRequest) (*GetRecordsResponse, error)
	//  rpc GetUpdates(models.GetUpdatesRequest) returns (models.GetUpdatesResponse);
	Ping(context.Context, *PingPong) (*PingPong, error)
	mustEmbedUnimplementedGKServerServer()
}

// UnimplementedGKServerServer must be embedded to have forward compatible implementations.
type UnimplementedGKServerServer struct {
}

func (UnimplementedGKServerServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedGKServerServer) Authorize(context.Context, *AuthorizeRequest) (*AuthorizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}
func (UnimplementedGKServerServer) CreateRecord(context.Context, *CreateRecordRequest) (*CreateRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecord not implemented")
}
func (UnimplementedGKServerServer) UpdateRecordField(context.Context, *UpdateRecordFieldsRequest) (*UpdateRecordFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecordField not implemented")
}
func (UnimplementedGKServerServer) DeleteRecord(context.Context, *DeleteRecordRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecord not implemented")
}
func (UnimplementedGKServerServer) GetRecord(context.Context, *GetRecordRequest) (*GetRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecord not implemented")
}
func (UnimplementedGKServerServer) GetRecords(context.Context, *GetRecordsRequest) (*GetRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecords not implemented")
}
func (UnimplementedGKServerServer) Ping(context.Context, *PingPong) (*PingPong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGKServerServer) mustEmbedUnimplementedGKServerServer() {}

// UnsafeGKServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GKServerServer will
// result in compilation errors.
type UnsafeGKServerServer interface {
	mustEmbedUnimplementedGKServerServer()
}

func RegisterGKServerServer(s grpc.ServiceRegistrar, srv GKServerServer) {
	s.RegisterService(&GKServer_ServiceDesc, srv)
}

func _GKServer_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GKServerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gkeeper.services.GKServer/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GKServerServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GKServer_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GKServerServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gkeeper.services.GKServer/Authorize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GKServerServer).Authorize(ctx, req.(*AuthorizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GKServer_CreateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GKServerServer).CreateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gkeeper.services.GKServer/CreateRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GKServerServer).CreateRecord(ctx, req.(*CreateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GKServer_UpdateRecordField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecordFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GKServerServer).UpdateRecordField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gkeeper.services.GKServer/UpdateRecordField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GKServerServer).UpdateRecordField(ctx, req.(*UpdateRecordFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GKServer_DeleteRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GKServerServer).DeleteRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gkeeper.services.GKServer/DeleteRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GKServerServer).DeleteRecord(ctx, req.(*DeleteRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GKServer_GetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GKServerServer).GetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gkeeper.services.GKServer/GetRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GKServerServer).GetRecord(ctx, req.(*GetRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GKServer_GetRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GKServerServer).GetRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gkeeper.services.GKServer/GetRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GKServerServer).GetRecords(ctx, req.(*GetRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GKServer_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingPong)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GKServerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gkeeper.services.GKServer/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GKServerServer).Ping(ctx, req.(*PingPong))
	}
	return interceptor(ctx, in, info, handler)
}

// GKServer_ServiceDesc is the grpc.ServiceDesc for GKServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GKServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gkeeper.services.GKServer",
	HandlerType: (*GKServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _GKServer_Register_Handler,
		},
		{
			MethodName: "Authorize",
			Handler:    _GKServer_Authorize_Handler,
		},
		{
			MethodName: "CreateRecord",
			Handler:    _GKServer_CreateRecord_Handler,
		},
		{
			MethodName: "UpdateRecordField",
			Handler:    _GKServer_UpdateRecordField_Handler,
		},
		{
			MethodName: "DeleteRecord",
			Handler:    _GKServer_DeleteRecord_Handler,
		},
		{
			MethodName: "GetRecord",
			Handler:    _GKServer_GetRecord_Handler,
		},
		{
			MethodName: "GetRecords",
			Handler:    _GKServer_GetRecords_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _GKServer_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}
